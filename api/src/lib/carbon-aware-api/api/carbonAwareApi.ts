/**
 * CarbonAware.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request'
import http from 'http'

/* tslint:disable:no-unused-locals */
import { CarbonIntensityBatchParametersDTO } from '../model/carbonIntensityBatchParametersDTO'
import { CarbonIntensityDTO } from '../model/carbonIntensityDTO'
import { EmissionsData } from '../model/emissionsData'
import { EmissionsForecastBatchParametersDTO } from '../model/emissionsForecastBatchParametersDTO'
import { EmissionsForecastDTO } from '../model/emissionsForecastDTO'
import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { ValidationProblemDetails } from '../model/validationProblemDetails';


import { HttpError, RequestFile } from './apis'

const defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CarbonAwareApiApiKeys {}

export class CarbonAwareApi {
  protected _basePath = defaultBasePath
  protected _defaultHeaders: any = {}
  protected _useQuerystring: boolean = false

  protected authentications = {
    default: <Authentication>new VoidAuth(),
  }

  protected interceptors: Interceptor[] = []

  constructor(basePath?: string)
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value
  }

  set basePath(basePath: string) {
    this._basePath = basePath
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders
  }

  get defaultHeaders() {
    return this._defaultHeaders
  }

  get basePath() {
    return this._basePath
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth
  }

  public setApiKey(key: CarbonAwareApiApiKeys, value: string) {
    ;(this.authentications as any)[CarbonAwareApiApiKeys[key]].apiKey = value
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor)
  }

  /**
   * This endpoint takes a batch of requests for historical forecast data, fetches them, and calculates the optimal   marginal carbon intensity windows for each using the same parameters available to the \'/emissions/forecasts/current\'  endpoint.                This endpoint is useful for back-testing what one might have done in the past, if they had access to the   current forecast at the time.
   * @summary Given an array of historical forecasts, retrieves the data that contains  forecasts metadata, the optimal forecast and a range of forecasts filtered by the attributes [start...end] if provided.
   * @param emissionsForecastBatchParametersDTO Array of requested forecasts.
   */
  public async batchForecastDataAsync(
    emissionsForecastBatchParametersDTO?: Array<EmissionsForecastBatchParametersDTO>,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage
    body: Array<EmissionsForecastDTO>
  }> {
    const localVarPath = this.basePath + '/emissions/forecasts/batch'
    let localVarQueryParameters: any = {}
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    )
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    let localVarFormParams: any = {}

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    let localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emissionsForecastBatchParametersDTO, "Array<EmissionsForecastBatchParametersDTO>")
        };

    }

    let authenticationPromise = Promise.resolve()
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      )
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{
        response: http.IncomingMessage
        body: Array<EmissionsForecastDTO>
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<EmissionsForecastDTO>'
              )
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   * This endpoint is useful for reporting the measured carbon intensity for a specific time period in a specific location.
   * @summary Retrieves the measured carbon intensity data between the time boundaries and calculates the average carbon intensity during that period.
   * @param location The location name where workflow is run
   * @param startTime The time at which the workflow we are measuring carbon intensity for started
   * @param endTime The time at which the workflow we are measuring carbon intensity for ended
   */
  public async getAverageCarbonIntensity(
    location: string,
    startTime: Date,
    endTime: Date,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: CarbonIntensityDTO }> {
    const localVarPath = this.basePath + '/emissions/average-carbon-intensity'
    let localVarQueryParameters: any = {}
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    )
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    let localVarFormParams: any = {}

    // verify required parameter 'location' is not null or undefined
    if (location === null || location === undefined) {
      throw new Error(
        'Required parameter location was null or undefined when calling getAverageCarbonIntensity.'
      )
    }

    // verify required parameter 'startTime' is not null or undefined
    if (startTime === null || startTime === undefined) {
      throw new Error(
        'Required parameter startTime was null or undefined when calling getAverageCarbonIntensity.'
      )
    }

    // verify required parameter 'endTime' is not null or undefined
    if (endTime === null || endTime === undefined) {
      throw new Error(
        'Required parameter endTime was null or undefined when calling getAverageCarbonIntensity.'
      )
    }

    if (location !== undefined) {
      localVarQueryParameters['location'] = ObjectSerializer.serialize(
        location,
        'string'
      )
    }

    if (startTime !== undefined) {
      localVarQueryParameters['startTime'] = ObjectSerializer.serialize(
        startTime,
        'Date'
      )
    }

    if (endTime !== undefined) {
      localVarQueryParameters['endTime'] = ObjectSerializer.serialize(
        endTime,
        'Date'
      )
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    let localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

    let authenticationPromise = Promise.resolve()
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      )
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{
        response: http.IncomingMessage
        body: CarbonIntensityDTO
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, 'CarbonIntensityDTO')
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   * The application only supports batching across a single location with different time boundaries. If multiple locations are provided, an error is returned.  For each item in the request array, the application returns a corresponding object containing the location, time boundaries, and average marginal carbon intensity.
   * @summary Given an array of request objects, each with their own location and time boundaries, calculate the average carbon intensity for that location and time period   and return an array of carbon intensity objects.
   * @param carbonIntensityBatchParametersDTO Array of inputs where each contains a \&quot;location\&quot;, \&quot;startDate\&quot;, and \&quot;endDate\&quot; for which to calculate average marginal carbon intensity.
   */
  public async getAverageCarbonIntensityBatch(
    carbonIntensityBatchParametersDTO?: Array<CarbonIntensityBatchParametersDTO>,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage
    body: Array<CarbonIntensityDTO>
  }> {
    const localVarPath =
      this.basePath + '/emissions/average-carbon-intensity/batch'
    let localVarQueryParameters: any = {}
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    )
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    let localVarFormParams: any = {}

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    let localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(carbonIntensityBatchParametersDTO, "Array<CarbonIntensityBatchParametersDTO>")
        };

    }

    let authenticationPromise = Promise.resolve()
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      )
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{
        response: http.IncomingMessage
        body: Array<CarbonIntensityDTO>
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<CarbonIntensityDTO>'
              )
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Calculate the best emission data by list of locations for a specified time period.
   * @param location String array of named locations
   * @param time [Optional] Start time for the data query.
   * @param toTime [Optional] End time for the data query.
   */
  public async getBestEmissionsDataForLocationsByTime(
    location: Array<string>,
    time?: Date,
    toTime?: Date,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<EmissionsData> }> {
    const localVarPath = this.basePath + '/emissions/bylocations/best'
    let localVarQueryParameters: any = {}
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    )
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    let localVarFormParams: any = {}

    // verify required parameter 'location' is not null or undefined
    if (location === null || location === undefined) {
      throw new Error(
        'Required parameter location was null or undefined when calling getBestEmissionsDataForLocationsByTime.'
      )
    }

    if (location !== undefined) {
      localVarQueryParameters['location'] = ObjectSerializer.serialize(
        location,
        'Array<string>'
      )
    }

    if (time !== undefined) {
      localVarQueryParameters['time'] = ObjectSerializer.serialize(time, 'Date')
    }

    if (toTime !== undefined) {
      localVarQueryParameters['toTime'] = ObjectSerializer.serialize(
        toTime,
        'Date'
      )
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    let localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

    let authenticationPromise = Promise.resolve()
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      )
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{
        response: http.IncomingMessage
        body: Array<EmissionsData>
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, 'Array<EmissionsData>')
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   * This endpoint fetches only the most recently generated forecast for all provided locations.  It uses the \"dataStartAt\" and   \"dataEndAt\" parameters to scope the forecasted data points (if available for those times). If no start or end time   boundaries are provided, the entire forecast dataset is used. The scoped data points are used to calculate average marginal   carbon intensities of the specified \"windowSize\" and the optimal marginal carbon intensity window is identified.                The forecast data represents what the data source predicts future marginal carbon intesity values to be,   not actual measured emissions data (as future values cannot be known).                This endpoint is useful for determining if there is a more carbon-optimal time to use electicity predicted in the future.
   * @summary Retrieves the most recent forecasted data and calculates the optimal marginal carbon intensity window.
   * @param location String array of named locations
   * @param dataStartAt Start time boundary of forecasted data points.Ignores current forecast data points before this time.  Defaults to the earliest time in the forecast data.
   * @param dataEndAt End time boundary of forecasted data points. Ignores current forecast data points after this time.  Defaults to the latest time in the forecast data.
   * @param windowSize The estimated duration (in minutes) of the workload.  Defaults to the duration of a single forecast data point.
   */
  public async getCurrentForecastData(
    location: Array<string>,
    dataStartAt?: Date,
    dataEndAt?: Date,
    windowSize?: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage
    body: Array<EmissionsForecastDTO>
  }> {
    const localVarPath = this.basePath + '/emissions/forecasts/current'
    let localVarQueryParameters: any = {}
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    )
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    let localVarFormParams: any = {}

    // verify required parameter 'location' is not null or undefined
    if (location === null || location === undefined) {
      throw new Error(
        'Required parameter location was null or undefined when calling getCurrentForecastData.'
      )
    }

    if (location !== undefined) {
      localVarQueryParameters['location'] = ObjectSerializer.serialize(
        location,
        'Array<string>'
      )
    }

    if (dataStartAt !== undefined) {
      localVarQueryParameters['dataStartAt'] = ObjectSerializer.serialize(
        dataStartAt,
        'Date'
      )
    }

    if (dataEndAt !== undefined) {
      localVarQueryParameters['dataEndAt'] = ObjectSerializer.serialize(
        dataEndAt,
        'Date'
      )
    }

    if (windowSize !== undefined) {
      localVarQueryParameters['windowSize'] = ObjectSerializer.serialize(
        windowSize,
        'number'
      )
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    let localVarUseFormData = false

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    }

    let authenticationPromise = Promise.resolve()
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      )
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{
        response: http.IncomingMessage
        body: Array<EmissionsForecastDTO>
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<EmissionsForecastDTO>'
              )
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Calculate the best emission data by location for a specified time period.
   * @param location String named location.
   * @param time [Optional] Start time for the data query.
   * @param toTime [Optional] End time for the data query.
   */
  public async getEmissionsDataForLocationByTime(
    location: string,
    time?: Date,
    toTime?: Date,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<EmissionsData> }> {
    const localVarPath = this.basePath + '/emissions/bylocation'
    let localVarQueryParameters: any = {}
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    )
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    let localVarFormParams: any = {}

    // verify required parameter 'location' is not null or undefined
    if (location === null || location === undefined) {
      throw new Error(
        'Required parameter location was null or undefined when calling getEmissionsDataForLocationByTime.'
      )
    }

    if (location !== undefined) {
      localVarQueryParameters['location'] = ObjectSerializer.serialize(
        location,
        'string'
      )
    }

    if (time !== undefined) {
      localVarQueryParameters['time'] = ObjectSerializer.serialize(time, 'Date')
    }

    if (toTime !== undefined) {
      localVarQueryParameters['toTime'] = ObjectSerializer.serialize(
        toTime,
        'Date'
      )
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    let localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

    let authenticationPromise = Promise.resolve()
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      )
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{
        response: http.IncomingMessage
        body: Array<EmissionsData>
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, 'Array<EmissionsData>')
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
  /**
   *
   * @summary Calculate the observed emission data by list of locations for a specified time period.
   * @param location String array of named locations
   * @param time [Optional] Start time for the data query.
   * @param toTime [Optional] End time for the data query.
   */
  public async getEmissionsDataForLocationsByTime(
    location: Array<string>,
    time?: Date,
    toTime?: Date,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: Array<EmissionsData> }> {
    const localVarPath = this.basePath + '/emissions/bylocations'
    let localVarQueryParameters: any = {}
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    )
    const produces = ['application/json']
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json'
    } else {
      localVarHeaderParams.Accept = produces.join(',')
    }
    let localVarFormParams: any = {}

    // verify required parameter 'location' is not null or undefined
    if (location === null || location === undefined) {
      throw new Error(
        'Required parameter location was null or undefined when calling getEmissionsDataForLocationsByTime.'
      )
    }

    if (location !== undefined) {
      localVarQueryParameters['location'] = ObjectSerializer.serialize(
        location,
        'Array<string>'
      )
    }

    if (time !== undefined) {
      localVarQueryParameters['time'] = ObjectSerializer.serialize(time, 'Date')
    }

    if (toTime !== undefined) {
      localVarQueryParameters['toTime'] = ObjectSerializer.serialize(
        toTime,
        'Date'
      )
    }

    ;(<any>Object).assign(localVarHeaderParams, options.headers)

    let localVarUseFormData = false

    const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

    let authenticationPromise = Promise.resolve()
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    )

    let interceptorPromise = authenticationPromise
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      )
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          ;(<any>localVarRequestOptions).formData = localVarFormParams
        } else {
          localVarRequestOptions.form = localVarFormParams
        }
      }
      return new Promise<{
        response: http.IncomingMessage
        body: Array<EmissionsData>
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error)
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(body, 'Array<EmissionsData>')
              resolve({ response: response, body: body })
            } else {
              reject(new HttpError(response, body, response.statusCode))
            }
          }
        })
      })
    })
  }
}
